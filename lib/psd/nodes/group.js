// Generated by CoffeeScript 1.11.1
(function() {
  var Group, Node, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  Node = require('../node');

  module.exports = Group = (function(superClass) {
    extend(Group, superClass);

    function Group() {
      return Group.__super__.constructor.apply(this, arguments);
    }

    Group.prototype.type = 'group';

    Group.prototype.passthruBlending = function() {
      return this.get('blendingMode') === 'passthru';
    };

    Group.prototype.isEmpty = function() {
      var child;
      if (!(function() {
        var i, len, ref, results;
        ref = this._children;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          results.push(child.isEmpty());
        }
        return results;
      }).call(this)) {
        return false;
      }
    };

    Group.prototype["export"] = function() {
      return _.merge(Group.__super__["export"].call(this), {
        type: 'group',
        children: this._children.map(function(c) {
          return c["export"]();
        })
      });
    };

    return Group;

  })(Node);

}).call(this);
