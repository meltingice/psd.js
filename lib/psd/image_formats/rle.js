// Generated by CoffeeScript 1.11.1
(function() {
  var slice = [].slice;

  module.exports = {
    parseRLE: function() {
      this.byteCounts = this.parseByteCounts();
      return this.parseChannelData();
    },
    parseByteCounts: function() {
      var i, k, ref, results;
      results = [];
      for (i = k = 0, ref = this.channels() * this.height(); 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        results.push(this.file.readShort());
      }
      return results;
    },
    parseChannelData: function() {
      var i, k, ref, results;
      this.chanPos = 0;
      this.lineIndex = 0;
      results = [];
      for (i = k = 0, ref = this.channels(); 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        this.decodeRLEChannel();
        results.push(this.lineIndex += this.height());
      }
      return results;
    },
    decodeRLEChannel: function() {
      var byteCount, finish, i, j, k, len, ref, results, val;
      results = [];
      for (j = k = 0, ref = this.height(); 0 <= ref ? k < ref : k > ref; j = 0 <= ref ? ++k : --k) {
        byteCount = this.byteCounts[this.lineIndex + j];
        finish = this.file.tell() + byteCount;
        results.push((function() {
          var ref1, results1;
          results1 = [];
          while (this.file.tell() < finish) {
            len = this.file.read(1)[0];
            if (len < 128) {
              len += 1;
              (ref1 = this.channelData).splice.apply(ref1, [this.chanPos, 0].concat(slice.call(this.file.read(len))));
              results1.push(this.chanPos += len);
            } else if (len > 128) {
              len ^= 0xff;
              len += 2;
              val = this.file.read(1)[0];
              results1.push((function() {
                var l, ref2, results2;
                results2 = [];
                for (i = l = 0, ref2 = len; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
                  results2.push(this.channelData[this.chanPos++] = val);
                }
                return results2;
              }).call(this));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    }
  };

}).call(this);
