// Generated by CoffeeScript 1.11.1
(function() {
  var Descriptor, LayerInfo, TextElements, _, parseEngineData,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  parseEngineData = require('parse-engine-data');

  LayerInfo = require('../layer_info');

  Descriptor = require('../descriptor');

  module.exports = TextElements = (function(superClass) {
    var COORDS_VALUE, TRANSFORM_VALUE;

    extend(TextElements, superClass);

    TextElements.shouldParse = function(key) {
      return key === 'TySh';
    };

    TRANSFORM_VALUE = ['xx', 'xy', 'yx', 'yy', 'tx', 'ty'];

    COORDS_VALUE = ['left', 'top', 'right', 'bottom'];

    function TextElements(layer, length) {
      TextElements.__super__.constructor.call(this, layer, length);
      this.version = null;
      this.transform = {};
      this.textVersion = null;
      this.descriptorVersion = null;
      this.textData = null;
      this.engineData = null;
      this.textValue = null;
      this.warpVersion = null;
      this.descriptorVersion = null;
      this.warpData = null;
      this.coords = {};
    }

    TextElements.prototype.parse = function() {
      var i, index, len, name, results;
      this.version = this.file.readShort();
      this.parseTransformInfo();
      this.textVersion = this.file.readShort();
      this.descriptorVersion = this.file.readInt();
      this.textData = new Descriptor(this.file).parse();
      this.textValue = this.textData['Txt '];
      this.engineData = parseEngineData(this.textData.EngineData);
      this.warpVersion = this.file.readShort();
      this.descriptorVersion = this.file.readInt();
      this.warpData = new Descriptor(this.file).parse();
      results = [];
      for (index = i = 0, len = COORDS_VALUE.length; i < len; index = ++i) {
        name = COORDS_VALUE[index];
        results.push(this.coords[name] = this.file.readInt());
      }
      return results;
    };

    TextElements.prototype.parseTransformInfo = function() {
      var i, index, len, name, results;
      results = [];
      for (index = i = 0, len = TRANSFORM_VALUE.length; i < len; index = ++i) {
        name = TRANSFORM_VALUE[index];
        results.push(this.transform[name] = this.file.readDouble());
      }
      return results;
    };

    TextElements.prototype.fonts = function() {
      if (this.engineData == null) {
        return [];
      }
      return this.engineData.ResourceDict.FontSet.map(function(f) {
        return f.Name;
      });
    };

    TextElements.prototype.sizes = function() {
      if ((this.engineData == null) && (this.styles().FontSize == null)) {
        return [];
      }
      return this.styles().FontSize;
    };

    TextElements.prototype.alignment = function() {
      var alignments;
      if (this.engineData == null) {
        return [];
      }
      alignments = ['left', 'right', 'center', 'justify'];
      return this.engineData.EngineDict.ParagraphRun.RunArray.map(function(s) {
        return alignments[Math.min(parseInt(s.ParagraphSheet.Properties.Justification, 10), 3)];
      });
    };

    TextElements.prototype.colors = function() {
      if ((this.engineData == null) || (this.styles().FillColor == null)) {
        return [[0, 0, 0, 255]];
      }
      return this.styles().FillColor.map(function(s) {
        var values;
        values = s.Values.map(function(v) {
          return Math.round(v * 255);
        });
        values.push(values.shift());
        return values;
      });
    };

    TextElements.prototype.styles = function() {
      var data;
      if (this.engineData == null) {
        return {};
      }
      if (this._styles != null) {
        return this._styles;
      }
      data = this.engineData.EngineDict.StyleRun.RunArray.map(function(r) {
        return r.StyleSheet.StyleSheetData;
      });
      return this._styles = _.reduce(data, function(m, o) {
        var k, v;
        for (k in o) {
          if (!hasProp.call(o, k)) continue;
          v = o[k];
          m[k] || (m[k] = []);
          m[k].push(v);
        }
        return m;
      }, {});
    };

    TextElements.prototype.toCSS = function() {
      var css, definition, k, v;
      definition = {
        'font-family': this.fonts().join(', '),
        'font-size': (this.sizes()[0]) + "pt",
        'color': "rgba(" + (this.colors()[0].join(', ')) + ")",
        'text-align': this.alignment()[0]
      };
      css = [];
      for (k in definition) {
        v = definition[k];
        if (v == null) {
          continue;
        }
        css.push(k + ": " + v + ";");
      }
      return css.join("\n");
    };

    TextElements.prototype["export"] = function() {
      return {
        value: this.textValue,
        font: {
          name: this.fonts()[0],
          sizes: this.sizes(),
          colors: this.colors(),
          alignment: this.alignment()
        },
        left: this.coords.left,
        top: this.coords.top,
        right: this.coords.right,
        bottom: this.coords.bottom,
        transform: this.transform
      };
    };

    return TextElements;

  })(LayerInfo);

}).call(this);
