// Generated by CoffeeScript 1.11.1
(function() {
  var LegacyTypeTool, TypeTool, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  TypeTool = require('./typetool');

  module.exports = LegacyTypeTool = (function(superClass) {
    extend(LegacyTypeTool, superClass);

    LegacyTypeTool.shouldParse = function(key) {
      return key === 'tySh';
    };

    function LegacyTypeTool(layer, length) {
      LegacyTypeTool.__super__.constructor.call(this, layer, length);
      this.transform = {};
      this.faces = [];
      this.styles = [];
      this.lines = [];
      this.type = 0;
      this.scalingFactor = 0;
      this.characterCount = 0;
      this.horzPlace = 0;
      this.vertPlace = 0;
      this.selectStart = 0;
      this.selectEnd = 0;
      this.color = null;
      this.antialias = null;
    }

    LegacyTypeTool.prototype.parse = function() {
      var facesCount, i, k, l, linesCount, m, ref, ref1, ref2, stylesCount;
      this.file.seek(2, true);
      this.parseTransformInfo();
      this.file.seek(2, true);
      facesCount = this.file.readShort();
      for (i = k = 0, ref = facesCount; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        this.faces.push(_({}).tap((function(_this) {
          return function(face) {
            var j, l, ref1, results;
            face.mark = _this.file.readShort();
            face.fontType = _this.file.readInt();
            face.fontName = _this.file.readString();
            face.fontFamilyName = _this.file.readString();
            face.fontStyleName = _this.file.readString();
            face.script = _this.file.readShort();
            face.numberAxesVector = _this.file.readInt();
            face.vector = [];
            results = [];
            for (j = l = 0, ref1 = face.numberAxesVector; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {
              results.push(face.vector.push(_this.file.readInt()));
            }
            return results;
          };
        })(this)));
      }
      stylesCount = this.file.readShort();
      for (i = l = 0, ref1 = stylesCount; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
        this.styles.push(_({}).tap((function(_this) {
          return function(style) {
            style.mark = _this.file.readShort();
            style.faceMark = _this.file.readShort();
            style.size = _this.file.readInt();
            style.tracking = _this.file.readInt();
            style.kerning = _this.file.readInt();
            style.leading = _this.file.readInt();
            style.baseShift = _this.file.readInt();
            style.autoKern = _this.file.readBoolean();
            _this.file.seek(1, true);
            return style.rotate = _this.file.readBoolean();
          };
        })(this)));
      }
      this.type = this.file.readShort();
      this.scalingFactor = this.file.readInt();
      this.characterCount = this.file.readInt();
      this.horzPlace = this.file.readInt();
      this.vertPlace = this.file.readInt();
      this.selectStart = this.file.readInt();
      this.selectEnd = this.file.readInt();
      linesCount = this.file.readShort();
      for (i = m = 0, ref2 = linesCount; 0 <= ref2 ? m < ref2 : m > ref2; i = 0 <= ref2 ? ++m : --m) {
        this.lines.push(_({}).tap(function(line) {
          line.charCount = this.file.readInt();
          line.orientation = this.file.readShort();
          line.alignment = this.file.readShort();
          line.actualChar = this.file.readShort();
          return line.style = this.file.readShort();
        }));
      }
      this.color = this.file.readSpaceColor();
      return this.antialias = this.file.readBoolean();
    };

    return LegacyTypeTool;

  })(TypeTool);

}).call(this);
