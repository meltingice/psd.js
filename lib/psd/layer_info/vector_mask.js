// Generated by CoffeeScript 1.11.1
(function() {
  var LayerInfo, PathRecord, VectorMask,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  LayerInfo = require('../layer_info');

  PathRecord = require('../path_record');

  module.exports = VectorMask = (function(superClass) {
    extend(VectorMask, superClass);

    VectorMask.shouldParse = function(key) {
      return key === 'vmsk' || key === 'vsms';
    };

    function VectorMask(layer, length) {
      VectorMask.__super__.constructor.call(this, layer, length);
      this.invert = null;
      this.notLink = null;
      this.disable = null;
      this.paths = [];
    }

    VectorMask.prototype.parse = function() {
      var i, j, numRecords, record, ref, results, tag;
      this.file.seek(4, true);
      tag = this.file.readInt();
      this.invert = (tag & 0x01) > 0;
      this.notLink = (tag & (0x01 << 1)) > 0;
      this.disable = (tag & (0x01 << 2)) > 0;
      numRecords = (this.length - 10) / 26;
      results = [];
      for (i = j = 0, ref = numRecords; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        record = new PathRecord(this.file);
        record.parse();
        results.push(this.paths.push(record));
      }
      return results;
    };

    VectorMask.prototype["export"] = function() {
      return {
        invert: this.invert,
        notLink: this.notLink,
        disable: this.disable,
        paths: this.paths.map(function(p) {
          return p["export"]();
        })
      };
    };

    return VectorMask;

  })(LayerInfo);

}).call(this);
