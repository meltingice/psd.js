// Generated by CoffeeScript 1.11.1
(function() {
  var Layer, LayerMask, Util, _;

  _ = require('lodash');

  Util = require('./util');

  Layer = require('./layer');

  module.exports = LayerMask = (function() {
    function LayerMask(file, header) {
      this.file = file;
      this.header = header;
      this.layers = [];
      this.mergedAlpha = false;
      this.globalMask = null;
    }

    LayerMask.prototype.skip = function() {
      return this.file.seek(this.file.readInt(), true);
    };

    LayerMask.prototype.parse = function() {
      var finish, maskSize;
      maskSize = this.file.readInt();
      finish = maskSize + this.file.tell();
      if (maskSize <= 0) {
        return;
      }
      this.parseLayers();
      this.parseGlobalMask();
      this.layers.reverse();
      return this.file.seek(finish);
    };

    LayerMask.prototype.parseLayers = function() {
      var i, j, k, layer, layerCount, layerInfoSize, len, ref, ref1, results;
      layerInfoSize = Util.pad2(this.file.readInt());
      if (layerInfoSize > 0) {
        layerCount = this.file.readShort();
        if (layerCount < 0) {
          layerCount = Math.abs(layerCount);
          this.mergedAlpha = true;
        }
        for (i = j = 0, ref = layerCount; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          this.layers.push(new Layer(this.file, this.header).parse());
        }
        ref1 = this.layers;
        results = [];
        for (k = 0, len = ref1.length; k < len; k++) {
          layer = ref1[k];
          results.push(layer.parseChannelImage());
        }
        return results;
      }
    };

    LayerMask.prototype.parseGlobalMask = function() {
      var length, maskEnd;
      length = this.file.readInt();
      if (length <= 0) {
        return;
      }
      maskEnd = this.file.tell() + length;
      this.globalMask = _({}).tap((function(_this) {
        return function(mask) {
          mask.overlayColorSpace = _this.file.readShort();
          mask.colorComponents = [_this.file.readShort() >> 8, _this.file.readShort() >> 8, _this.file.readShort() >> 8, _this.file.readShort() >> 8];
          mask.opacity = _this.file.readShort() / 16.0;
          return mask.kind = _this.file.readByte();
        };
      })(this));
      return this.file.seek(maskEnd);
    };

    return LayerMask;

  })();

}).call(this);
